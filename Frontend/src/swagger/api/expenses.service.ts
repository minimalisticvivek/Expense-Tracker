/**
 * Expense Tracker API
 * REST API endpoints for Expense Tracker App
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CheckPremiumResponse } from '../model/checkPremiumResponse';
import { DownloadHistory } from '../model/downloadHistory';
import { DynamicPaginationResponse } from '../model/dynamicPaginationResponse';
import { Expense } from '../model/expense';
import { Expenses } from '../model/expenses';
import { GetExpensesData } from '../model/getExpensesData';
import { Leaderboard } from '../model/leaderboard';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class ExpensesService {
  protected basePath = 'http://localhost:4000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Add Expense For The User.
   *
   * @param body Expense Data which is to be added for the user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addexpense(
    body?: Expense,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Expenses>;
  public addexpense(
    body?: Expense,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Expenses>>;
  public addexpense(
    body?: Expense,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Expenses>>;
  public addexpense(
    body?: Expense,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (APIKeyHeader) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
      headers = headers.set(
        'Authorization',
        sessionStorage.getItem('token') as string
      );
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Expenses>(
      'post',
      `${this.basePath}/expensesData`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns whether the user is a premium user or not (boolean).
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkpremium(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CheckPremiumResponse>;
  public checkpremium(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CheckPremiumResponse>>;
  public checkpremium(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CheckPremiumResponse>>;
  public checkpremium(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (APIKeyHeader) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
      headers = headers.set(
        'Authorization',
        sessionStorage.getItem('token') as string
      );
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<CheckPremiumResponse>(
      'get',
      `${this.basePath}/users`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete Expense For The User.
   *
   * @param id ID of the Expense Data which is to be deleted for the user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteexpense(
    id: any,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Expenses>;
  public deleteexpense(
    id: any,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Expenses>>;
  public deleteexpense(
    id: any,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Expenses>>;
  public deleteexpense(
    id: any,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteexpense.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Expenses>(
      'delete',
      `${this.basePath}/expensesData/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns a downloadable file link with Expenses of the User.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public downloadexpenses(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<string>;
  public downloadexpenses(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<string>>;
  public downloadexpenses(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<string>>;
  public downloadexpenses(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (APIKeyHeader) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<string>('get', `${this.basePath}/download`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * Returns history of downloads performed by the user with the downloadable file link.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public downloadhistory(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DownloadHistory>;
  public downloadhistory(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DownloadHistory>>;
  public downloadhistory(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DownloadHistory>>;
  public downloadhistory(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (APIKeyHeader) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DownloadHistory>(
      'get',
      `${this.basePath}/downloadHistory`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Edit Expense For The User.
   *
   * @param id ID of the Expense Data which is to be edited for the user.
   * @param body Expense Data which is to be updated for the user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public editexpense(
    id: any,
    body?: Expense,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Expenses>;
  public editexpense(
    id: any,
    body?: Expense,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Expenses>>;
  public editexpense(
    id: any,
    body?: Expense,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Expenses>>;
  public editexpense(
    id: any,
    body?: Expense,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling editexpense.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<Expenses>(
      'put',
      `${this.basePath}/expensesData/${encodeURIComponent(String(id))}`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns a single expense object with the id passed into the request.
   *
   * @param id ID of the expense which you want to fetch from the Expenses Data.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getexpense(
    id: any,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Expenses>;
  public getexpense(
    id: any,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Expenses>>;
  public getexpense(
    id: any,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Expenses>>;
  public getexpense(
    id: any,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getexpense.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Expenses>(
      'get',
      `${this.basePath}/expenses/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Show Paginated Expenses For The User.
   *
   * @param pageNo Page No of which you want to fetch Expenses
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getexpenses(
    pageNo: any,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<GetExpensesData>;
  public getexpenses(
    pageNo: any,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<GetExpensesData>>;
  public getexpenses(
    pageNo: any,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<GetExpensesData>>;
  public getexpenses(
    pageNo: any,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (pageNo === null || pageNo === undefined) {
      throw new Error(
        'Required parameter pageNo was null or undefined when calling getexpenses.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (APIKeyHeader) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
      headers = headers.set(
        'Authorization',
        sessionStorage.getItem('token') as string
      );
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<GetExpensesData>(
      'get',
      `${this.basePath}/expensesData/${encodeURIComponent(String(pageNo))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns list of users with their expenses as an array response.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public showleaderboard(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Leaderboard>;
  public showleaderboard(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Leaderboard>>;
  public showleaderboard(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Leaderboard>>;
  public showleaderboard(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Leaderboard>(
      'get',
      `${this.basePath}/leaderboard`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Updates the number of expenses you can see on the Dashboard.
   *
   * @param pages No of items to see per page.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateitemsperpage(
    pages: any,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DynamicPaginationResponse>;
  public updateitemsperpage(
    pages: any,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DynamicPaginationResponse>>;
  public updateitemsperpage(
    pages: any,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DynamicPaginationResponse>>;
  public updateitemsperpage(
    pages: any,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (pages === null || pages === undefined) {
      throw new Error(
        'Required parameter pages was null or undefined when calling updateitemsperpage.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DynamicPaginationResponse>(
      'get',
      `${this.basePath}/pages/${encodeURIComponent(String(pages))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Changes the user type to a premium user.
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updatetopremium(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<boolean>;
  public updatetopremium(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<boolean>>;
  public updatetopremium(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<boolean>>;
  public updatetopremium(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // authentication (APIKeyHeader) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<boolean>('put', `${this.basePath}/users`, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
